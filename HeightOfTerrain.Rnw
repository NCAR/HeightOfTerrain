\documentclass{article}

\begin{document}

\title{Downloading Terrain Data for DEEPWAVE}
\author{Al Cooper}
\maketitle

\section*{The Data Source}
During the Shuttle Radar Topography Mission (SRTM) of 2000 (cf.~Farr, T.G., M. Kobrick, 2000, Shuttle Radar Topography Mission produces a wealth of data, Amer. Geophys. Union Eos, v. 81, p. 583-585; also Farr, T. G., et al. (2007), The Shuttle Radar Topography Mission, Rev. Geophys., 45, RG2004, doi:10.1029/2005RG000183), the altitude of the Earth's surface was mapped from 56S to 60N latitude with resolution of 3 arc-sec or about 90 m at the equator. For the US and territories, the resolution was 1 arc-sec or about 30 m at the equator. The data from this mission is archived at this web site: http://www.webgis.com/srtm3.html. The files can be download in individual files that span 1 degree by 1 degree. The format of these files leads to the need for some processing that is documented here. The R code that downloaded these files is in the 'chunk' of this document called 'download-zip-files'. Initially, the range downloaded covered 40S to 48S and 165E to 175E. After unzipping, the data set was about 115 MB. The heights in the 3-arc-sec files are presented in 1201$\times$1201 arrays where the edges duplicate the values in the adjacent arrays. The missing-value flag is -32768. The format is row-major, i.e., the 1201 values for the first west-to-east row are presented first, then the next row to the north, etc. The unpacked files have 2,884,802 bytes. The reference location for each 1-degree by 1-degree array is the name of the individual file (e.g., "S43E173.hgt" has a reference position of 43$^{\circ}$S and 173$^{\circ}$N at the center of the lower left element of the array). The values give the height in meters above the WGS84/EGM96 geoid. The measurement uncertainty was about 9 m at 90\% confidence (Farr et al.~2007), but there are some biases. The SAR-radar technique did not penetrate fully through vegetation and so might reflect the top of the vegetation canopy or some level intermediate between the canopy and the surface, and the radar penetrated a few meters into snow and so measured a height between the snow cover and the terrain (as measured in Feb.~2000). 

Here is the R code that downloads, unzips, and reads the data files. The entire-Earth dataset would require about 80 GB to store, so the download should be limited in area to the region of the project. Here the latitude range from 40S to 48S and the longitude range from 165E to 175E was chosen, an area that required required about 115 MB to store the unzipped files (with some missing because they were all over-ocean). Here the data files are saved in Rdata-format gzipped files suitable for loading via commands like "load(file='XS40E170.gz')", which will retrieve the 'height' matrix for that lat/lon square.


<<download-zip-files, echo=TRUE, cache=TRUE>>=

# there should be a subdirectory named 'TerrainData' under this project directory
lt_s <- 48
lt_n <- 40
lg_w <- 165
lg_e <- 175
setwd ("./TerrainData")  # Save the data in a subdirectory
for (lt in lt_s:lt_n) {         # latitude limits (note 'S' in sprintf statement)
  for (lg in lg_w:lg_e) {       # longitude limits (note 'E')
    sname <- sprintf("ZS%dE%d.gz", lt, lg)
    if (!file.exists(sname)) {                        # Skip if saved file already present 
      dname <- sprintf ("S%dE%d.hgt", lt, lg)         # file with a sq. degree of data
      url <- sprintf("http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/Islands/%s.zip", dname)
      if (RCurl::url.exists (url)) {
        system (sprintf ("wget %s", url), wait=TRUE)  # use a wget call to do the download
        utils::unzip(sprintf("%s.zip", dname))        # and unzip
                                                      # then read the whole deg x deg array
        height <- readBin (dname, 'int', size=2, n=1201*1201, endian='swap')
        height [height == -32768] <- NA               # set NA for missing values
        dim (height) <- c(1201,1201)                  # Make into a matrix
        save (height, file=sname, compress='gzip')
        unlink (sprintf("%s.zip", dname))             # delete the zip file
        unlink (dname)                                # and the unzipped file
      }
    }
  }
}

@

The first problem was that the values are binary two-byte or 16-bit signed integers and are in big-endian format (most significant byte first) while our processing machines are mostly little-endian, so a byte-swapping conversion is necessary. This was readily performed by the R reading function 'readBin', as illustrated in the preceding code chunk. It was useful to construct a function that would return the terrain altitude for a given latitude and longitude, so that is shown in the next chunk:

<<height-function, echo=TRUE>>=

HeightOfTerrain <- function (.lat, .long) {
  lt <- as.integer (.lat)
  lg <- as.integer (.long)
  if (is.na(lt)) {return (NA)}
  if (is.na(lg)) {return (NA)}
  if (lt < 0) {
    lNS <- "S"
    lt <- -lt
  } else {
    lNS <- "N"
  }
  if (lg < 0) {
    lEW <- "W"
    lg <- -lg + 1
  } else {
    lEW <- "E"
  }
  vname <- sprintf("Z%s%d%s%d", lNS, lt+1, lEW, lg)
  if (!exists(vname, .GlobalEnv)) {
    zfile <- sprintf("%s.gz", vname)
    if (file.exists(zfile)) {
      load(file=sprintf("%s.gz", vname))
      assign (vname, height, envir=.GlobalEnv)
    } else {
      return (NA)
    }
  }
  ix <- as.integer ( (ceiling (.long) - .long + 1/2400) * 1200) + 1
  iy <- as.integer ( (ceiling (.lat) - .lat + 1/2400) * 1200) + 1
  hgt <- get(vname, envir=.GlobalEnv)[ix, iy]
  return (hgt)
}

@

\section*{Adding a terrain-height variable}

For a netCDF file, it is then possible to look up the latitude and longitude along the flight track and calculate the elevation of the terrain below the aircraft and the height of the aircraft above the terrain. Here is the code that does this:

<<add-variables-to-netCDF-file, echo=TRUE>>=

require (Ranadu)
Project <- "DEEPWAVE"
Flight <- "rf12"
fname <- sprintf("%s%s/%s%s.nc", DataDirectory (), Project, Project, Flight)
fnew  <- sprintf("%s%s/%s%sZ.nc", DataDirectory (), Project, Project, Flight)
# copy file to avoid changing original
file.copy (fname, fnew, overwrite=TRUE)
Data <- getNetCDF (fnew, c("LATC", "LONC", "GGALTB"))
ESFC <- vector ("numeric", length(Data$Time))
netCDFfile <- open.ncdf (fnew, write=TRUE)
for (i in 1:length (Data$Time)) {
  ESFC[i] <- HeightOfTerrain (Data$LATC[i], Data$LONC[i])
}
ALTG <- Data$GGALTB - ESFC
Data["ESFC"] <- ESFC
varESFC <- var.def.ncdf ("ESFC", "m", 
            netCDFfile$dim["Time"], -32767.,
            "Elevation of the Earth's surface below the aircraft position")
varALTG <- var.def.ncdf ("ALTG", "m", 
            netCDFfile$dim["Time"], -32767.,
            "Altitude of the aircraft above the Earth's surface")


newfile <- var.add.ncdf (netCDFfile, varESFC)
newfile <- var.add.ncdf (newfile, varALTG)
put.var.ncdf (newfile, "ESFC", ESFC)
put.var.ncdf (newfile, "ALTG", ALTG)
close.ncdf (newfile)


@

The example was for project \Sexpr{Project} and flight \Sexpr{Flight}. The flight track is shown in Fig.~\ref{fig:plot-flight-track}. The altitude of the terrain below the aircraft is shown in Fig.~\ref{fig:plot-terrain-height}.

<<plot-flight-track, fig.lp="fig:", fig.cap="The flight track for the GV on flight 12 of the DEEPWAVE project.">>=

Z <- plotTrack (Data$LONC, Data$LATC, Data$Time, .Spacing=60, .WindFlags=2)
title (Flight)

@

<<plot-terrain-height, fig.lp="fig:", fig.cap="The elevation of the terrain below the position of the aircraft during Flight 12 of the DEEPWAVE project.">>=

ESFC[is.na(ESFC)] <- 0
Z <- plotWAC (Data$Time, ESFC)
title (Flight)

@

\end{document}
